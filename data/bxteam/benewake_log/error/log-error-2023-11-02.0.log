2023-11-02 18:12:16.002 [restartedMain] ERROR [,] org.mybatis.spring.mapper.MapperFactoryBean - Error while adding the mapper 'interface com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper' to configuration.
org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.lambda$getAnnotationWrapper$6(MybatisMapperAnnotationBuilder.java:656)
	at java.util.HashMap.merge(HashMap.java:1255)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:272)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:655)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:647)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:106)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:94)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:129)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.benewake.saleordersystem.SaleOrderSystemApplication.main(SaleOrderSystemApplication.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2023-11-02 18:12:16.069 [restartedMain] ERROR [,] org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryController': Unsatisfied dependency expressed through field 'deliveryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryServiceImpl': Unsatisfied dependency expressed through field 'inquiryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.benewake.saleordersystem.SaleOrderSystemApplication.main(SaleOrderSystemApplication.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryServiceImpl': Unsatisfied dependency expressed through field 'inquiryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 38 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 51 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	... 61 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.lambda$getAnnotationWrapper$6(MybatisMapperAnnotationBuilder.java:656)
	at java.util.HashMap.merge(HashMap.java:1255)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:272)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:655)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:647)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:106)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:94)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:129)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	... 64 common frames omitted
2023-11-02 18:13:01.454 [restartedMain] ERROR [,] org.mybatis.spring.mapper.MapperFactoryBean - Error while adding the mapper 'interface com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper' to configuration.
org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.lambda$getAnnotationWrapper$6(MybatisMapperAnnotationBuilder.java:656)
	at java.util.HashMap.merge(HashMap.java:1255)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:272)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:655)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:647)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:106)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:94)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:129)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.benewake.saleordersystem.SaleOrderSystemApplication.main(SaleOrderSystemApplication.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2023-11-02 18:13:01.514 [restartedMain] ERROR [,] org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryController': Unsatisfied dependency expressed through field 'deliveryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryServiceImpl': Unsatisfied dependency expressed through field 'inquiryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.benewake.saleordersystem.SaleOrderSystemApplication.main(SaleOrderSystemApplication.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryServiceImpl': Unsatisfied dependency expressed through field 'inquiryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 38 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 51 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	... 61 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script></script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.lambda$getAnnotationWrapper$6(MybatisMapperAnnotationBuilder.java:656)
	at java.util.HashMap.merge(HashMap.java:1255)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:272)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:655)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:647)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:106)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:94)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:129)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	... 64 common frames omitted
2023-11-02 18:15:08.730 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - 服务器发生异常：
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
### The error may exist in com/benewake/saleordersystem/mapper/Vo/SalesOrderVoMapper.java (best guess)
### The error may involve com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter-Inline
### The error occurred while setting parameters
### SQL: SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table  WHERE (bb.inquiry_id IS NOT NULL AND state >= ?)  ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table  WHERE (item_code IS NOT NULL)  ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table  WHERE (item_code IS NOT NULL)  ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table  WHERE (customer_name IS NOT NULL)  ) AS f ON a.customer_id = f.customer_id  WHERE (customer_name IS NOT NULL AND created_user_name IS NOT NULL AND salesman_name IS NOT NULL AND (created_user_name = ? OR salesman_name = ?))  ORDER BY inquiry_code DESC
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
2023-11-02 18:15:08.730 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:239)
2023-11-02 18:15:08.730 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
2023-11-02 18:15:08.730 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy84.selectList(Unknown Source)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:166)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy119.selectListByFilter(Unknown Source)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl.selectSalesOrderVoList(InquiryServiceImpl.java:234)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$FastClassBySpringCGLIB$$3ad626c8.invoke(<generated>)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$EnhancerBySpringCGLIB$$57998039.selectSalesOrderVoList(<generated>)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController.selectList(SaleOrderController.java:147)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$FastClassBySpringCGLIB$$cf2c6a0c.invoke(<generated>)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.TrackingTimeAspectj.trackingTimeAdvice(TrackingTimeAspectj.java:28)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:15:08.731 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.LogAspect.before(LogAspect.java:111)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:15:08.732 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$EnhancerBySpringCGLIB$$707fe52a.selectList(<generated>)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:15:08.733 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
2023-11-02 18:15:08.734 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
2023-11-02 18:15:08.735 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
2023-11-02 18:15:08.736 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.Thread.run(Thread.java:750)
2023-11-02 18:15:26.719 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - 服务器发生异常：
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
### The error may exist in com/benewake/saleordersystem/mapper/Vo/SalesOrderVoMapper.java (best guess)
### The error may involve com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter-Inline
### The error occurred while setting parameters
### SQL: SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table  WHERE (bb.inquiry_id IS NOT NULL AND state >= ?)  ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table  WHERE (item_code IS NOT NULL)  ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table  WHERE (item_code IS NOT NULL)  ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table  WHERE (customer_name IS NOT NULL)  ) AS f ON a.customer_id = f.customer_id  WHERE (customer_name IS NOT NULL AND created_user_name IS NOT NULL AND salesman_name IS NOT NULL AND (created_user_name = ? OR salesman_name = ?))  ORDER BY inquiry_code DESC
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
2023-11-02 18:15:26.720 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:239)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy84.selectList(Unknown Source)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:166)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy119.selectListByFilter(Unknown Source)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl.selectSalesOrderVoList(InquiryServiceImpl.java:234)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$FastClassBySpringCGLIB$$3ad626c8.invoke(<generated>)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:26.721 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$EnhancerBySpringCGLIB$$57998039.selectSalesOrderVoList(<generated>)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController.selectList(SaleOrderController.java:147)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$FastClassBySpringCGLIB$$cf2c6a0c.invoke(<generated>)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:26.722 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.TrackingTimeAspectj.trackingTimeAdvice(TrackingTimeAspectj.java:28)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.LogAspect.before(LogAspect.java:111)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:15:26.723 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:15:26.724 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:15:26.725 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$EnhancerBySpringCGLIB$$707fe52a.selectList(<generated>)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
2023-11-02 18:15:26.726 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:26.727 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
2023-11-02 18:15:26.728 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
2023-11-02 18:15:26.729 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
2023-11-02 18:15:26.733 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
2023-11-02 18:15:26.733 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
2023-11-02 18:15:26.733 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
2023-11-02 18:15:26.734 [http-nio-8080-exec-9] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.Thread.run(Thread.java:750)
2023-11-02 18:17:34.480 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - 服务器发生异常：
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
### The error may exist in com/benewake/saleordersystem/mapper/Vo/SalesOrderVoMapper.java (best guess)
### The error may involve com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter-Inline
### The error occurred while setting parameters
### SQL: SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table  WHERE (bb.inquiry_id IS NOT NULL AND state >= ?)  ) AS a LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table  WHERE (item_code IS NOT NULL)  ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table  WHERE (item_code IS NOT NULL)  ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table  WHERE (customer_name IS NOT NULL)  ) AS f ON a.customer_id = f.customer_id  WHERE (customer_name IS NOT NULL AND created_user_name IS NOT NULL AND salesman_name IS NOT NULL AND (created_user_name = ? OR salesman_name = ?))  ORDER BY inquiry_code DESC
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:239)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy84.selectList(Unknown Source)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:166)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy119.selectListByFilter(Unknown Source)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl.selectSalesOrderVoList(InquiryServiceImpl.java:234)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$FastClassBySpringCGLIB$$3ad626c8.invoke(<generated>)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:17:34.481 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$EnhancerBySpringCGLIB$$825a3932.selectSalesOrderVoList(<generated>)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController.selectList(SaleOrderController.java:147)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$FastClassBySpringCGLIB$$cf2c6a0c.invoke(<generated>)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.TrackingTimeAspectj.trackingTimeAdvice(TrackingTimeAspectj.java:28)
2023-11-02 18:17:34.482 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.LogAspect.before(LogAspect.java:111)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:17:34.483 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$EnhancerBySpringCGLIB$$9cc57b06.selectList(<generated>)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:17:34.484 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
2023-11-02 18:17:34.485 [http-nio-8080-exec-2] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.Thread.run(Thread.java:750)
2023-11-02 18:18:57.131 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - 服务器发生异常：
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
### The error may exist in com/benewake/saleordersystem/mapper/Vo/SalesOrderVoMapper.java (best guess)
### The error may involve com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter-Inline
### The error occurred while setting parameters
### SQL: SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table  WHERE (bb.inquiry_id IS NOT NULL AND state >= ?)  ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table  WHERE (item_code IS NOT NULL)  ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table  WHERE (item_code IS NOT NULL)  ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table  WHERE (customer_name IS NOT NULL)  ) AS f ON a.customer_id = f.customer_id  WHERE (customer_name IS NOT NULL AND created_user_name IS NOT NULL AND salesman_name IS NOT NULL AND (created_user_name = ? OR salesman_name = ?))  ORDER BY inquiry_code DESC
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:239)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy84.selectList(Unknown Source)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:166)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
2023-11-02 18:18:57.132 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy119.selectListByFilter(Unknown Source)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl.selectSalesOrderVoList(InquiryServiceImpl.java:234)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$FastClassBySpringCGLIB$$3ad626c8.invoke(<generated>)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$EnhancerBySpringCGLIB$$70930733.selectSalesOrderVoList(<generated>)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController.selectList(SaleOrderController.java:147)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$FastClassBySpringCGLIB$$cf2c6a0c.invoke(<generated>)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:18:57.133 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.TrackingTimeAspectj.trackingTimeAdvice(TrackingTimeAspectj.java:28)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.LogAspect.before(LogAspect.java:111)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:18:57.134 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:18:57.135 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:18:57.136 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:18:57.137 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$EnhancerBySpringCGLIB$$b948d1c9.selectList(<generated>)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:18:57.138 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
2023-11-02 18:18:57.139 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:18:57.140 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:18:57.141 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
2023-11-02 18:18:57.142 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
2023-11-02 18:18:57.143 [http-nio-8080-exec-1] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.Thread.run(Thread.java:750)
2023-11-02 18:19:04.537 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - 服务器发生异常：
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
### The error may exist in com/benewake/saleordersystem/mapper/Vo/SalesOrderVoMapper.java (best guess)
### The error may involve com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter-Inline
### The error occurred while setting parameters
### SQL: SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table  WHERE (bb.inquiry_id IS NOT NULL AND state >= ?)  ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table  WHERE (item_code IS NOT NULL)  ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table  WHERE (item_code IS NOT NULL)  ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table  WHERE (FIM_user_name IS NOT NULL)  ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table  WHERE (customer_name IS NOT NULL)  ) AS f ON a.customer_id = f.customer_id  WHERE (customer_name IS NOT NULL AND created_user_name IS NOT NULL AND salesman_name IS NOT NULL AND (created_user_name = ? OR salesman_name = ?))  ORDER BY inquiry_code DESC
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:239)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy84.selectList(Unknown Source)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:166)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy119.selectListByFilter(Unknown Source)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl.selectSalesOrderVoList(InquiryServiceImpl.java:234)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$FastClassBySpringCGLIB$$3ad626c8.invoke(<generated>)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:19:04.538 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$EnhancerBySpringCGLIB$$70930733.selectSalesOrderVoList(<generated>)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController.selectList(SaleOrderController.java:147)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$FastClassBySpringCGLIB$$cf2c6a0c.invoke(<generated>)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.TrackingTimeAspectj.trackingTimeAdvice(TrackingTimeAspectj.java:28)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.LogAspect.before(LogAspect.java:111)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:19:04.539 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$EnhancerBySpringCGLIB$$b948d1c9.selectList(<generated>)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:19:04.540 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
2023-11-02 18:19:04.541 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.Thread.run(Thread.java:750)
2023-11-02 18:26:19.155 [restartedMain] ERROR [,] org.mybatis.spring.mapper.MapperFactoryBean - Error while adding the mapper 'interface com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper' to configuration.
org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.lambda$getAnnotationWrapper$6(MybatisMapperAnnotationBuilder.java:656)
	at java.util.HashMap.merge(HashMap.java:1255)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:272)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:655)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:647)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:106)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:94)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:129)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.benewake.saleordersystem.SaleOrderSystemApplication.main(SaleOrderSystemApplication.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2023-11-02 18:26:19.188 [restartedMain] ERROR [,] org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryController': Unsatisfied dependency expressed through field 'deliveryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryServiceImpl': Unsatisfied dependency expressed through field 'inquiryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.benewake.saleordersystem.SaleOrderSystemApplication.main(SaleOrderSystemApplication.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deliveryServiceImpl': Unsatisfied dependency expressed through field 'inquiryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inquiryServiceImpl': Unsatisfied dependency expressed through field 'salesOrderVoMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 38 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'salesOrderVoMapper' defined in file [E:\北醒文件\测试版本\saleorder-system-main\target\classes\com\benewake\saleordersystem\mapper\Vo\SalesOrderVoMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 51 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	... 61 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Detected conflicting annotations '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id ${qw1.customSqlSegment}) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table ${qw2.customSqlSegment}) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code ${qw3.customSqlSegment}) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table ${qw4.customSqlSegment}) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table ${qw5.customSqlSegment}) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table ${qw6.customSqlSegment}) as f on a.customer_id = f.customer_id ${ew.customSqlSegment} order by inquiry_code desc </script>])' and '@org.apache.ibatis.annotations.Select(databaseId=, value=[<script>SELECT DISTINCT inquiry_id, inquiry_code, inquiry_init_type, state, created_user_name, item_type, allow_inquiry, inquiry_type, item_code, item_name, customer_name, salesman_name, sale_num, expected_time, arranged_time, delay, customer_type, order_delivery_progress, delivery_code, receive_time, delivery_state, customize, remark, create_time, update_time FROM (SELECT fim_inquiry_table.inquiry_id, (CASE WHEN state = -1 THEN '无效' WHEN state = 0 THEN '保存' ELSE CONCAT('询单', state, '次') END) AS state, a.inquiry_code AS inquiry_code, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN order_delivery_progress IS NULL THEN '未发货' WHEN order_delivery_progress = 80 THEN '已签收' WHEN order_delivery_progress = 40 THEN '海外订单' ELSE '已发货客户未签收' END) AS order_delivery_progress, delivery_code, receive_time, delivery_state, delay AS delay, (CASE WHEN item_type = 1 THEN '已有标品' WHEN item_type = 2 THEN '已有定制' WHEN item_type = 3 THEN '新增软件定制' WHEN item_type = 4 THEN '新增原材料定制' WHEN item_type = 5 THEN '新增原材料+软件定制' ELSE '错误物料类型' END) AS item_type, item_code AS item_code, item_name AS item_name, (CASE WHEN inquiry_type = 1 THEN 'PO(客户付款)' WHEN inquiry_type = 2 THEN 'PR(客户提出付款意向)' WHEN inquiry_type = 3 THEN 'YG(供应链预估)' WHEN inquiry_type = 4 THEN 'YC(销售预测)' WHEN inquiry_type = 5 THEN 'XD(意向询单)' ELSE 'ER(错误)' END) AS inquiry_type, (CASE WHEN item_type = 1 OR item_type = 2 THEN '否' WHEN item_type = 3 OR item_type = 4 OR item_type = 5 THEN '是' ELSE '错误' END) AS customize, (CASE WHEN customer_type IS NULL THEN '日常' ELSE customer_type END) AS customer_type, (CASE WHEN inquiry_init_type = 5 THEN '销售询单' WHEN inquiry_init_type = 4 THEN '销售预测' WHEN inquiry_init_type = 3 THEN '供应链预估' ELSE '错误的初始类型' END) AS inquiry_init_type FROM (SELECT fim_inquiry_table.inquiry_id, inquiry_code AS inquiry_code, state AS state, inquiry_init_type AS inquiry_init_type, inquiry_type AS inquiry_type, sale_num AS sale_num, expected_time AS expected_time, arranged_time AS arranged_time, allow_inquiry AS allow_inquiry, created_user AS created_user, salesman_id AS salesman_id, a.item_id AS item_id, a.customer_id AS customer_id, remark AS remark, (CASE WHEN arranged_time > expected_time THEN '是' ELSE '否' END) AS delay FROM fim_inquiry_table <if test='qw1.customSqlSegment != null'>${qw1.customSqlSegment}</if> ) AS a LEFT JOIN (SELECT inquiry_code, MIN(created_time) AS create_time, MAX(created_time) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code) AS b ON a.inquiry_code = b.inquiry_code LEFT JOIN (SELECT customer_id, item_id, customer_type FROM fim_customer_type_table) AS d ON a.customer_id = d.customer_id AND d.item_id = a.item_id LEFT JOIN (SELECT item_id, item_code, item_name, item_type FROM fim_item_table <if test='qw2.customSqlSegment != null'>${qw2.customSqlSegment}</if> ) AS e ON e.item_id = a.item_id LEFT JOIN (SELECT inquiry_code, delivery_state AS order_delivery_progress, delivery_code AS delivery_code, receive_time AS receive_time, delivery_latest_state AS delivery_state FROM delivery_table <if test='qw3.customSqlSegment != null'>${qw3.customSqlSegment}</if> ) AS j ON j.inquiry_code = a.inquiry_code LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS salesman_name FROM fim_users_table <if test='qw4.customSqlSegment != null'>${qw4.customSqlSegment}</if> ) AS b ON a.salesman_id = b.FIM_user_id LEFT JOIN (SELECT FIM_user_id, FIM_user_name AS created_user_name FROM fim_users_table <if test='qw5.customSqlSegment != null'>${qw5.customSqlSegment}</if> ) AS c ON a.created_user = c.FIM_user_id LEFT JOIN (SELECT customer_id, customer_name FROM fim_customer_table <if test='qw6.customSqlSegment != null'>${qw6.customSqlSegment}</if> ) AS f ON a.customer_id = f.customer_id <if test='ew.customSqlSegment != null'>${ew.customSqlSegment}</if> ORDER BY inquiry_code DESC</script>])' on 'com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter'.
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.lambda$getAnnotationWrapper$6(MybatisMapperAnnotationBuilder.java:656)
	at java.util.HashMap.merge(HashMap.java:1255)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:272)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:655)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.getAnnotationWrapper(MybatisMapperAnnotationBuilder.java:647)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:106)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:94)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:129)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	... 64 common frames omitted
2023-11-02 18:27:05.076 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - 服务器发生异常：
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'z.inquiry_codeleft' in 'on clause'
### The error may exist in com/benewake/saleordersystem/mapper/Vo/SalesOrderVoMapper.java (best guess)
### The error may involve com.benewake.saleordersystem.mapper.Vo.SalesOrderVoMapper.selectListByFilter-Inline
### The error occurred while setting parameters
### SQL: select distinct (inquiry_id),inquiry_code,inquiry_init_type,state,created_user_name,item_type,allow_inquiry,inquiry_type,item_code,item_name,customer_name,salesman_name,sale_num,expected_time,arranged_time,delay,customer_type,order_delivery_progress,delivery_code,receive_time,delivery_state,customize,remark from (select inquiry_id as inquiry_id,(case when state=-1 then '无效' when state=0 then '保存' else concat('询单',state,'次') end) as state,a.inquiry_code as inquiry_code,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,allow_inquiry as allow_inquiry,created_user as created_user,salesman_id as salesman_id,a.item_id as item_id,a.customer_id as customer_id,remark as remark,(case when order_delivery_progress is null then '未发货' when order_delivery_progress = 80 then '已签收' when order_delivery_progress = 40 then '海外订单'else '已发货客户未签收' end) as order_delivery_progress,delivery_code,receive_time,delivery_state,delay as delay,(case when item_type = 1 then '已有标品' when item_type = 2 then '已有定制' when item_type = 3 then '新增软件定制' when item_type = 4 then '新增原材料定制'  when item_type = 5 then '新增原材料+软件定制' else '错误物料类型' end) as item_type,item_code as item_code,item_name as item_name,(case when inquiry_type = 1 then 'PO(客户付款)' when inquiry_type = 2 then 'PR(客户提出付款意向)' when inquiry_type = 3 then 'YG(供应链预估)' when inquiry_type = 4 then 'YC(销售预测)' when inquiry_type = 5 then 'XD(意向询单)' else 'ER(错误)' end) as inquiry_type,(case when item_type = 1 or item_type = 2 then '否' when item_type = 3 or item_type = 4 or item_type = 5 then '是' else '错误' end) as customize,(case when customer_type is null then '日常' else customer_type end) as customer_type,(case when inquiry_init_type = 5 then '销售询单' when inquiry_init_type = 4 then '销售预测' when inquiry_init_type = 3 then '供应链预估' else '错误的初始类型' end) as inquiry_init_type from (select fim_inquiry_table.inquiry_id,inquiry_code as inquiry_code,state as state,inquiry_init_type as inquiry_init_type,inquiry_type as inquiry_type,sale_num as sale_num,expected_time as expected_time,arranged_time as arranged_time,created_user as created_user,salesman_id as salesman_id,item_id as item_id,customer_id as customer_id,remark as remark,allow_inquiry as allow_inquiry,(case when arranged_time > expected_time then '是' else '否' end )as delay from fim_inquiry_table left join (select SUBSTRING_INDEX(GROUP_CONCAT(inquiry_id ORDER BY created_time desc),',',1) as inquiry_id,SUBSTRING_INDEX(GROUP_CONCAT(inquiry_type ORDER BY created_time asc),',',1) as inquiry_init_type from fim_inquiry_table group by inquiry_code) as bb on bb.inquiry_id = fim_inquiry_table.inquiry_id WHERE (bb.inquiry_id IS NOT NULL AND state >= ?)) as a left join (select customer_id,item_id,customer_type from fim_customer_type_table) as d on a.customer_id = d.customer_id and d.item_id = a.item_id left join (SELECT inquiry_code, MIN( created_time ) AS create_time, MAX( created_time ) AS update_time FROM fim_inquiry_table GROUP BY inquiry_code )as z on a.inquiry_code=z.inquiry_codeleft join (select item_id,item_code,item_name,item_type from fim_item_table WHERE (item_code IS NOT NULL)) as e on e.item_id = a.item_id left join(select inquiry_code,delivery_state as order_delivery_progress,delivery_code as delivery_code,receive_time as receive_time,delivery_latest_state as delivery_state from delivery_table) as j on j.inquiry_code = a.inquiry_code WHERE (item_code IS NOT NULL)) as a left join (select FIM_user_id,FIM_user_name as salesman_name from fim_users_table WHERE (FIM_user_name IS NOT NULL)) as b on a.salesman_id = b.FIM_user_id left join (select FIM_user_id,FIM_user_name as created_user_name from fim_users_table WHERE (FIM_user_name IS NOT NULL)) as c on a.created_user = c.FIM_user_id left join (select customer_id,customer_name from fim_customer_table WHERE (customer_name IS NOT NULL)) as f on a.customer_id = f.customer_id WHERE (customer_name IS NOT NULL AND created_user_name IS NOT NULL AND salesman_name IS NOT NULL AND (created_user_name = ? OR salesman_name = ?)) order by inquiry_code desc
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'z.inquiry_codeleft' in 'on clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'z.inquiry_codeleft' in 'on clause'
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:239)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy84.selectList(Unknown Source)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:166)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.sun.proxy.$Proxy119.selectListByFilter(Unknown Source)
2023-11-02 18:27:05.077 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl.selectSalesOrderVoList(InquiryServiceImpl.java:234)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$FastClassBySpringCGLIB$$3ad626c8.invoke(<generated>)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.service.impl.InquiryServiceImpl$$EnhancerBySpringCGLIB$$8d0bedc8.selectSalesOrderVoList(<generated>)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController.selectList(SaleOrderController.java:147)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$FastClassBySpringCGLIB$$cf2c6a0c.invoke(<generated>)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.TrackingTimeAspectj.trackingTimeAdvice(TrackingTimeAspectj.java:28)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:27:05.078 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.aspect.LogAspect.before(LogAspect.java:111)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - com.benewake.saleordersystem.controller.SaleOrderController$$EnhancerBySpringCGLIB$$81a2cc3d.selectList(<generated>)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.reflect.Method.invoke(Method.java:498)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
2023-11-02 18:27:05.079 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
2023-11-02 18:27:05.080 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
2023-11-02 18:27:05.081 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
2023-11-02 18:27:05.082 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
2023-11-02 18:27:05.082 [http-nio-8080-exec-3] ERROR [,] c.b.s.controller.advice.ExceptionAdvice - java.lang.Thread.run(Thread.java:750)
